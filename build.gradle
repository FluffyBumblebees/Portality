plugins {
    id 'java'
    id 'maven-publish'
    id 'fabric-loom' version '0.12-SNAPSHOT'
}
//apply from: 'https://raw.githubusercontent.com/SizableShrimp/Forge-Class-Remapper/main/classremapper.gradle'

def BUILD_NUMBER = System.getenv("COMMIT") ? "${project.api_version}-${System.getenv("COMMIT")}" : "${project.api_version}"
version = "${minecraft_version}-$BUILD_NUMBER"
group = "com.buuz135"
archivesBaseName = "portality"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    jcenter()
    maven {
        name 'jared maven'
        url "https://maven.blamejared.com/"
    }
    maven {
        url "https://maven.tterrag.com/"
    }
    maven {
        url 'https://www.dogforce-games.com/maven/'
    }
    maven {
        url = "https://www.cursemaven.com"
    }
    maven {
        name = 'parchment'
        url = 'https://maven.parchmentmc.org'
    }
    maven {
        url = uri("https://storage.googleapis.com/devan-maven/")
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${project.mappings_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    if (findProject(':titanium') != null) {
        implementation project(':titanium')
    } else {
        modCompileOnly('com.hrznstudio:titanium:1.18.2-3.5.2-34')
    }
    include modApi("teamreborn:energy:${project.tr_energy_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    //runtimeOnly fg.deobf("team.chisel.ctm:CTM:1.18-+")
}

/*afterEvaluate {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "2000"
    }
}*/

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task deobfJar(type:Jar) {
    from sourceSets.main.output
    classifier 'deobf'
}

artifacts {
    archives sourcesJar
    archives deobfJar
}

/*
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "s3://cdn.hrzn.studio/maven"
            authentication {
                awsIm(AwsImAuthentication)
            }
        }
    }
}*/
